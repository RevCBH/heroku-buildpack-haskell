#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast and fail hard.
set -eo pipefail

# clean up leaking environment
unset GIT_DIR

# config
SCONS_VERSION="1.2.0"
S3_BUCKET="heroku-buildpack-nodejs"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

mkdir -p $CACHE_DIR
echo "-----> Cache Dir $CACHE_DIR"
echo "-----> Build Dir $BUILD_DIR"
rm -rf $CACHE_DIR/ghc
rm -rf $CACHE_DIR/dotghc
rm -rf $CACHE_DIR/cabal
rm -rf $CACHE_DIR/lib

if [ ! -e $CACHE_DIR/ghc ]; then
  GHC_URL="http://s3.amazonaws.com/haskell-heroku-buildpack/ghc.tar.gz"
  echo "-----> Downloading GHC"
  curl -# --max-time 120 -L "$GHC_URL" | tar xz -C $CACHE_DIR
fi

# rm -rf $CACHE_DIR/dotghc/*
# Restore GHC registry if available
if [ -e $CACHE_DIR/dotghc ]; then
  rm -rf $HOME/.ghc
  mv $CACHE_DIR/dotghc $HOME/.ghc
fi

# Restore Cabal cache or download an empty environemt
if [ -e $CACHE_DIR/cabal ]; then
  rm -rf $HOME/.cabal
  mv $CACHE_DIR/cabal $HOME/.cabal
elif [ ! -e $HOME/.cabal ]; then
  CABAL_URL="http://s3.amazonaws.com/haskell-heroku-buildpack/cabal.tar.gz"
  echo "-----> Downloading Cabal"
  curl -# --max-time 120 -L "$CABAL_URL" | tar xz -C $HOME
fi

mkdir -p $CACHE_DIR/lib
ln -fs /usr/lib/libgmp.so.3 $CACHE_DIR/lib/libgmp.so

# GHC has shell scripts with a bunch of hardcoded references to
# /home/vagrant/ghc/*
#
# Let's murder it to death.
find $CACHE_DIR/ghc -type f -print0 | xargs -0 perl -i -p -e  "s{/home/vagrant/ghc}{$CACHE_DIR/ghc}g"

PATH=$CACHE_DIR/ghc/bin:$PATH

echo "-----> Setting up ghc-pkg"
ghc-pkg recache
ghc-pkg describe base > base.conf
cat base.conf

sed -i "s#ld-options:#ld-options: -L$CACHE_DIR/lib#" base.conf
perl -i -p -e  "s{/home/vagrant/ghc}{$CACHE_DIR/ghc}g" base.conf
ghc-pkg update base.conf
rm base.conf

ghc-pkg recache
ghc-pkg check

# pushd /app
# ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
# popd

export PATH=$HOME/.cabal/bin:$PATH

echo "-----> Updating Cabal"
cabal update

function error() {
  echo " !     $*" >&2
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function manifest_versions() {
  curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.${1}" -s -o - | tr -s '\n' ' '
}

function resolve_version() {
  available_versions="$1"
  requested_version="$2"
  default_version="$3"

  if [ "$2" == "" ]; then
    echo $3
  else
    args=""
    for version in $available_versions; do args="${args} -v \"${version}\""; done
    for version in $requested_version; do args="${args} -r \"${version}\""; done
    evaluated_version=$(eval $bootstrap_node/bin/node $LP_DIR/vendor/node-semver/bin/semver ${args} || echo "")
    echo "$evaluated_version" | tail -n 1
  fi
}

function package_engine_version() {
  version=$(cat $BUILD_DIR/package.json | $bootstrap_node/bin/node $LP_DIR/vendor/json/json engines.$1 2>/dev/null)
  if [ $? == 0 ]; then
    echo $version | sed -e 's/\([<>=]\) /\1/g'
  fi
}

function package_resolve_version() {
  engine="$1"
  resolved_version=$(resolve_version "${engine_versions[$engine]}" "${engine_requests[$engine]}" "${engine_defaults[$engine]}")

  if [ "${resolved_version}" == "" ]; then
    error "Requested engine $engine version ${engine_requests[$engine]} does not match available versions: ${engine_versions[$engine]}"
  else
    echo $resolved_version
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

bootstrap_node=$(mktmpdir bootstrap_node)
package_download "nodejs" "0.4.7" $bootstrap_node

# make some associative arrays
declare -A engine_versions
declare -A engine_defaults
declare -A engine_requests

engine_defaults["node"]="0.4.7"
engine_defaults["npm"]="1.0.106"

engine_versions["node"]=$(manifest_versions "nodejs")
engine_requests["node"]=$(package_engine_version "node")

engine_versions["npm"]=$(manifest_versions "npm")
engine_requests["npm"]=$(package_engine_version "npm")

echo "-----> Resolving engine versions"

# add a warning if no version of node specified
if [ "${engine_requests["node"]}" == "" ]; then
  echo
  echo "WARNING: No version of Node.js specified in package.json, see:" | indent
  echo "https://devcenter.heroku.com/articles/nodejs-versions" | indent
  echo
  echo "WARNING: The default version of Node.js and npm on Heroku will begin" | indent
  echo "tracking the latest stable release starting September 1, 2012."  | indent
  echo
fi

NODE_VERSION=$(package_resolve_version "node")
echo "Using Node.js version: ${NODE_VERSION}" | indent

NPM_VERSION=$(package_resolve_version "npm")
echo "Using npm version: ${NPM_VERSION}" | indent

# cache directories
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION/$NPM_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

# s3 packages
NODE_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nodejs-${NODE_VERSION}.tgz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
package_download "scons" "${SCONS_VERSION}" "${VENDORED_SCONS}"

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

# install dependencies with npm
# echo "-----> Installing dependencies with npm"
# run_npm "install --production"
# run_npm "rebuild"
# echo "Dependencies installed" | indent

echo "-----> Building Node.js runtime environment"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/vendor/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh

echo "-----> Finding node + coffee binary"
PATH="$BUILD_DIR/vendor/bin:vendor/bin:$PATH"
echo `which node` | indent
echo `which coffee` | indent

echo "-----> Release the hounds! Installing application"
cd $BUILD_DIR

echo "-----> Some debugging"

echo "ghc-pkg:"
echo `which ghc-pkg`
echo "cabal:"
echo `which cabal`
echo "ghc-pkg list:"
ghc-pkg list

set +o errexit

LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install MissingH-1.2.0.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install ReadArgs-1.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install SHA-1.6.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install aeson-0.6.1.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install ansi-terminal-0.6
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install asn1-data-0.7.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install attoparsec-0.10.4.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install attoparsec-conduit-0.5.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install authenticate-1.3.2.6
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install base-unicode-symbols-0.2.2.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install base64-bytestring-1.0.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install base64-conduit-0.5.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install basic-prelude-0.3.2.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install blaze-builder-0.3.1.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install blaze-builder-conduit-0.5.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install blaze-html-0.5.1.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install blaze-markup-0.5.1.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install blaze-textual-0.2.0.8
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install byteorder-1.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install case-insensitive-0.4.0.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cereal-0.3.5.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install certificate-1.2.8
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cipher-aes-0.1.7
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install classy-prelude-0.5.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install clientsession-0.8.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install conduit-0.5.6
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cookie-0.4.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cprng-aes-0.2.5
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cpu-0.1.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install crypto-api-0.10.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install crypto-conduit-0.4.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install crypto-pubkey-types-0.1.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cryptocipher-0.3.5
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install cryptohash-0.8.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install css-text-0.1.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install data-default-0.5.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install date-cache-0.3.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install dlist-0.5
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install email-validate-1.0.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install entropy-0.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install failure-0.2.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install fast-logger-0.3.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install file-embed-0.0.4.7
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install filesystem-conduit-0.5.0.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install fsnotify-0.0.6
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install ghc-paths-0.1.0.9
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install hamlet-1.1.6.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install hashable-1.2.0.5
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install hjsmin-0.1.4.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install hslogger-1.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install hspec-1.4.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install hspec-expectations-0.3.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install html-conduit-0.1.0.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install http-conduit-1.6.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install http-date-0.0.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install http-reverse-proxy-0.1.1.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install http-types-0.7.3.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install language-javascript-0.5.7
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install largeword-1.0.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install lifted-base-0.2.0.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install mime-mail-0.4.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install mime-types-0.1.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install monad-control-0.3.1.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install monad-logger-0.2.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install nats-0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install network-2.3.1.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install network-conduit-0.6.2.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install optparse-applicative-0.5.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install path-pieces-0.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install pem-0.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install persistent-1.0.2.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install persistent-postgresql-1.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install persistent-template-1.0.0.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install pool-conduit-0.1.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install postgresql-libpq-0.8.2.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install postgresql-simple-0.2.4.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install project-template-0.1.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install pureMD5-2.1.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install pwstore-fast-2.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install regex-pcre-builtin-0.94.4.5.8.31
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install resource-pool-0.2.1.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install resourcet-0.4.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install safe-0.3.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install semigroups-0.9
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install setenv-0.1.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install shakespeare-1.0.3.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install shakespeare-css-1.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install shakespeare-i18n-1.0.0.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install shakespeare-js-1.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install shakespeare-text-1.0.0.5
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install silently-1.2.4.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install simple-sendfile-0.2.11
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install skein-0.1.0.12
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install socks-0.4.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install stringsearch-0.3.6.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install system-fileio-0.3.11
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install system-filepath-0.4.7
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install tagged-0.4.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install tagsoup-0.12.8
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install tagstream-conduit-0.5.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install tar-0.4.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install text-0.11.2.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install tls-0.9.11
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install tls-extra-0.4.7.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install transformers-0.3.0.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install transformers-base-0.4.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install unix-compat-0.4.1.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install unix-time-0.1.5
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install unordered-containers-0.2.3.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install utf8-light-0.4.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install utf8-string-0.3.7
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install vault-0.2.0.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install vector-0.10.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install void-0.5.11
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install wai-1.4.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install wai-app-static-1.3.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install wai-extra-1.3.2.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install wai-logger-0.3.0
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install wai-test-1.3.0.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install warp-1.3.7.4
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install word8-0.0.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install xml-conduit-1.0.3.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install xml-types-0.3.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install xss-sanitize-0.3.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yaml-0.8.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-1.1.9
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-auth-1.1.5.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-core-1.1.8.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-default-1.1.3.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-form-1.2.1.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-json-1.1.2.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-persistent-1.1.0.1
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-routes-1.1.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-static-1.1.2.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install yesod-test-0.3.3.2
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install zlib-bindings-0.1.1.3
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install zlib-conduit-0.5.0.3

set -o errexit

cabal configure

# cabal install --only-dependencies --force-reinstall
# the ld library path hack is horrible, but let's see if it helps
LD_LIBRARY_PATH=$CACHE_DIR/lib cabal install -j5 --disable-library-profiling --disable-executable-profiling --disable-shared

echo "-----> Caching Cabal packages"
shopt -s extglob
rm $HOME/.cabal/bin/!(cabal|happy)
mv $HOME/.cabal $CACHE_DIR/cabal
mv $HOME/.ghc $CACHE_DIR/dotghc

echo "Cache dir size:"
du -ms $CACHE_DIR
echo "Build dir size:"
du -ms $BUILD_DIR
